import os
from shutil import copyfile, copyfileobj
import tools.csv2elmtype as csv2elm
import gzip


BUILD = "build"
ELMJS = os.path.join(BUILD, "elm.js")
MINELMJS = os.path.join(BUILD, "elm.min.js")
PORTJS = "ports.js"
MINPORTJS = os.path.join(BUILD, "ports.min.js")
INDEX = "index.html"
GZIPPED = f"{INDEX}.gzip"
TEMPLATE = "template.html.txt"

binfolder = ".bin"#".bin" if os.path.isdir(os.path.join(".", "node_modules", ".bin")) else "bin"

UGLIFYJS=os.path.join(".", "node_modules", binfolder, "uglifyjs")
ELM=os.path.join(".", "node_modules", binfolder, "elm")

env_options={
    "ENV": os.environ,
}
env=Environment(**env_options)

AddOption('--release',
          dest='release',
          action='store_true',
          help='release build')

elmsrc=Glob("src/**/*.elm")
elmsrc += Glob("src/*.elm")

env.Command(ELM, [], 'npm install elm')
env.Command(UGLIFYJS, [], 'npm install uglify-es')


if GetOption('release'):
    env.Command(ELMJS, [elmsrc, ELM],
                f"{ELM} make {os.path.join('src', 'Main.elm')} --optimize --output={ELMJS}")
else:
    env.Command(ELMJS, [elmsrc, ELM],
                f"{ELM} make {os.path.join('src', 'Main.elm')} --output={ELMJS}")

# args = '{\\"compress\\":{\\"unsafe_comps\\":true\,\\"unsafe\\":true\,\\"keep_fargs\\":false\,\\"pure_getters\\":true\,\\"pure_funcs\\":[\\"F2\\"\,\\"F3\\"\,\\"F4\\"\,\\"F5\\"\,\\"F6\\"\,\\"F7\\"\,\\"F8\\"\,\\"F9\\"\,\\"A2\\"\,\\"A3\\"\,\\"A4\\"\,\\"A5\\"\,\\"A6\\"\,\\"A7\\"\,\\"A8\\"\,\\"A9\\"]}\,\\"mangle\\":true}'
# env.Command( INDEX, [ELMHTML, MINIFYHTML], f"{MINIFYHTML} --minify-js {args} {ELMHTML} -o {INDEX}")

if GetOption('release'):
    env.Command(
        MINELMJS, [UGLIFYJS, ELMJS],
        f"{UGLIFYJS} {ELMJS} --compress 'pure_funcs=\"F2,F3,F4,F5,F6,F7,F8,F9,A2,A3,A4,A5,A6,A7,A8,A9\",pure_getters,keep_fargs=false,unsafe_comps,unsafe' | {UGLIFYJS} --mangle --output={MINELMJS}"
    )
    env.Command(
        MINPORTJS, [UGLIFYJS, PORTJS],
        f"{UGLIFYJS} {PORTJS} --compress | {UGLIFYJS} --mangle --output={MINPORTJS}"
    )
else:
    def copyelm(*args, **kwards):
        copyfile(ELMJS, MINELMJS)

    env.Command(
        MINELMJS, ELMJS,
        copyelm
    )

    def copyport(*args, **kwards):
        copyfile(PORTJS, MINPORTJS)

    env.Command(
        MINPORTJS, PORTJS,
        copyport
    )


def format_index_html(target, source, env):
    with open(str(target[0]), 'w') as i, open(str(source[0]), 'r') as t:
        template=t.read()

        keys={}
        for el in source[1:]:
            with open(str(el), 'r') as f:
                keys[os.path.basename(str(el)).replace('.', '_')]=f.read()

        i.write(template.format(**keys))

def zipindex(*args, **kwargs):
    print(kwargs["target"][0].name)
    with open(kwargs["source"][0].name, 'rb') as f_in:
        with gzip.open(kwargs["target"][0].name, 'wb') as f_out:
            copyfileobj(f_in, f_out)


env.Command(
    INDEX, [TEMPLATE, MINELMJS, 'style.css', MINPORTJS], format_index_html)
final=env.Command(GZIPPED, INDEX, zipindex)

env.Default(final)

env.NoClean([ELM, UGLIFYJS])
